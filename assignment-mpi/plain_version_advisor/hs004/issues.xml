<?xml version='1.0' encoding='UTF-8'?>

<bag xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean" xmlns:float="http://www.w3.org/2001/XMLSchema#float" xmlns:int="http://www.w3.org/2001/XMLSchema#int" xmlns:unsignedInt="http://www.w3.org/2001/XMLSchema#unsignedInt" xmlns:unsignedLong="http://www.w3.org/2001/XMLSchema#unsignedLong" int:version="16">
 <issues>
  <issue>
   <unsignedInt:flags>321</unsignedInt:flags>
   <id>issue_roofline_guidance</id>
   <int:severity>2</int:severity>
   <text/>
   <title>issue_roofline_guidance_title</title>
   <attributes>
    <float:severity>2</float:severity>
   </attributes>
   <parameters boolean:is_vectorized="false" zone="mem" ops_type="float"/>
   <recommendations>
    <recommendation>
     <int:confidence>2</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>rec_roofline_guidance_memory_bound</id>
     <text>roofline_guidance_memory_bound_text</text>
     <title>This loop is mostly memory bound </title>
     <attributes>
      <float:confidence>2</float:confidence>
     </attributes>
     <parameters>
      <boolean:is_vectorized>false</boolean:is_vectorized>
      <boolean:is_fma_dominated>false</boolean:is_fma_dominated>
      <boolean:scalar_mem_instructions>false</boolean:scalar_mem_instructions>
      <traits>Divisions, Type Conversions</traits>
      <boolean:inefficient_map>false</boolean:inefficient_map>
      <boolean:low_vector_efficiency>false</boolean:low_vector_efficiency>
      <int:limiting_roof>2</int:limiting_roof>
     </parameters>
    </recommendation>
    <recommendation>
     <int:confidence>2</int:confidence>
     <unsignedInt:flags>1032</unsignedInt:flags>
     <id>rec_roofline_guidance_collect_all_memory_levels</id>
     <text>rec_roofline_guidance_collect_text</text>
     <title>Collect Roofline for all memory levels </title>
     <attributes>
      <float:confidence>2</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>2</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>65</unsignedInt:flags>
   <id>issue_fma</id>
   <int:severity>1</int:severity>
   <text>Your current hardware supports the AVX2 instruction set architecture (ISA), which enables the use of fused multiply-add (FMA) instructions. Improve performance by utilizing FMA instructions. </text>
   <title>Potential underutilization of FMA instructions </title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>rec_fma_target_avx2_isa_c</id>
     <text>Although static analysis presumes the loop may benefit from FMA instructions available with the AVX2 ISA, no AVX2-specific code executed for this loop. To fix: Use the &lt;div class=&quot;inplace_sample&quot;&gt;xCORE-AVX2&lt;/div&gt; compiler option to generate AVX2-specific code, or the &lt;div class=&quot;inplace_sample&quot;&gt;axCORE-AVX2&lt;/div&gt; compiler option to enable multiple, feature-specific, auto-dispatch code generation, including AVX2. &lt;table&gt; &lt;tr&gt; &lt;th&gt; Windows* OS &lt;/th&gt; &lt;th&gt; Linux* OS &lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;/QxCORE-AVX2 or /QaxCORE-AVX2&lt;/td&gt; &lt;td&gt;-xCORE-AVX2 or -axCORE-AVX2&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;b&gt;Read More: &lt;/b&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;C++/17/index.htm#GUID-2D881A91-C5D7-4DDD-84B1-FB9D0D597F4D.htm&quot;&gt;ax, Qax&lt;/a&gt;; &lt;a href=&quot;C++/17/index.htm#GUID-09734487-1819-4C1E-B314-2497F2B64C45.htm&quot;&gt;x, Qx&lt;/a&gt;
&lt;li&gt;&lt;em&gt;Code Generation Options&lt;/em&gt; in the &lt;a href=&quot;https://software.intel.com/en-us/intel-cplusplus-compiler-16.0-user-and-reference-guide&quot;&gt;Intel&amp;reg; C++ Compiler 16.0 User and Reference Guide&lt;/a&gt; &lt;li&gt;&lt;a href=&quot;https://software.intel.com/en-us/blogs/2016/01/13/compiling-for-the-intel-xeon-phi-processor-x200-and-the-intel-avx-512-isa&quot;&gt;Compiling for the Intel&amp;reg; Xeon Phi&amp;trade; processor x200 and the Intel&amp;reg; AVX-512 ISA&lt;/a&gt; and &lt;a href=&quot;https://software.intel.com/en-us/vectorization-resources-advisor&quot;&gt;Vectorization Resources for Intel&amp;reg; Advisor Users&lt;/a&gt; &lt;/ul&gt; </text>
     <title>Target the AVX2 ISA </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>2</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>65</unsignedInt:flags>
   <id>issue_type_conversions</id>
   <int:severity>1</int:severity>
   <text>There are multiple data types within loops. Utilize hardware vectorization support more effectively by avoiding data type conversion. </text>
   <title>Data type conversions present </title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>rec_type_conversions_smallest_c</id>
     <text>The &lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;source loop&lt;/a&gt; contains data types of different widths. To fix: Use the smallest data type that gives the needed precision to use the entire &lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;vector register width&lt;/a&gt;.
&lt;/br&gt;&lt;b&gt;Example:&lt;/b&gt; If only 16-bits are needed, using a short rather than an int can make the difference between eight-way or four-way SIMD parallelism, respectively. </text>
     <title>Use the smallest data type </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>2</unsignedLong:rowKey>
  </issue>
 </issues>
 <traits>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>13</int:id>
   <text>System Function Calls Present </text>
   <unsignedLong:rowKey>1</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>0</int:fieldId>
   <int:id>14</int:id>
   <text>Indirect Function Calls Present </text>
   <unsignedLong:rowKey>1</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>153</int:fieldId>
   <int:id>6</int:id>
   <text>Low Iteration Duration Makes This Loop a Better Candidate for Vectorization Parallelism Than Threading Parallelism </text>
   <unsignedLong:rowKey>2</unsignedLong:rowKey>
  </trait>
  <trait>
   <int:fieldId>155</int:fieldId>
   <int:id>7</int:id>
   <text>Average Iteration Duration Issue (Expand Trip Counts Column To Check Exact Duration Value) 
Low Iteration Duration Makes This Loop a Better Candidate for Vectorization Parallelism Than Threading Parallelism </text>
   <unsignedLong:rowKey>2</unsignedLong:rowKey>
  </trait>
 </traits>
</bag>
